



-----------------------------------------------------------------
traditional JVM application
-----------------------------------------------------------------

    start-up-time  : 2.28s
    classes-loaded : 7k
    rss memory     : 577m
    responsiveness : not good at high traffic

-----------------------------------------------------------------    

why ?

    -> Parse config files
    -> Classpath & classes scanning
    -> For annotations, getters or other annotations
    -> Build framework metamodel objects
    -> Prepare reflection and build proxies
    -> Start and open IO, threads etc

    + 
    
    -> limited resource pool

-----------------------------------------------------------------   


-----------------------------------------------------------------
Quarkus JVM application
-----------------------------------------------------------------

    start-up-time  : 0.8s
    classes-loaded : 2k
    rss memory     : 473m
    responsiveness : good at high traffic



-----------------------------------------------------------------
Quarkus Native application
-----------------------------------------------------------------

    start-up-time  : 0.017s
    rss memory     : 200m
    responsiveness : good at high traffic
    
----------------------------------------------------------------    